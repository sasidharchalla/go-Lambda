name: CI
on:
 push:
  branches: 
    - main
  paths:
    - backend/lambda/**/*.go
env:
  Deploy_Route_Url: ${{secrets.AWS_DEPLOY_DEV_ENV}}
  Lambda_Location: "backend/lambda/"
  region_to_deploy_lambdas: "ap-south-1"

jobs:
 build:
 
  runs-on: ubuntu-latest
  strategy: 
    matrix:
      go-version: [1.17]
  steps:
   - name: check the code
     uses: actions/Checkout@v2
  
   - name: Get changed files
     id: files
     uses: jitterbit/get-changed-files@v1
     with:
       format: 'json'

   - name: Verify Added/Modified files for logging purposes
     run: |
       readarray -t added_modified_files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.added_modified }}')"
       for added_modified_file in "${added_modified_files[@]}"; do
         echo "${added_modified_file}"
       done
   
   - name: Verify Removed files for logging purposes
     run: |
       readarray -t removed_files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.removed }}')"
       for removed_file in ${removed_files[@]}; do
         echo "${removed_file}."
       done

   - name: setup go
     uses: actions/setup-go@v2
     with:
       go-version: ${{ matrix.go-version }}
     env:
      GO111MODULE: "on"
 
   - name: check setup
     run: |
     
       go mod init leapfrog-backend-Go-Lambdas
       go mod tidy
    
   - name: Configure AWS Credentials
     uses: aws-actions/configure-aws-credentials@v1
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{secrets.AWS_DEFAULT_REGION}}

   - name: codebuild,Zip and Deploy    
     run: |
       env GOOS=linux
       readarray -t added_modified_files <<<"$(jq -r '.[]' <<<'${{ steps.files.outputs.added_modified }}')"
       for added_modified_file in "${added_modified_files[@]}"; do
         if [[  $(awk -v a="${added_modified_file}" -v b="${{env.Lambda_Location}}" 'BEGIN{print index(a,b)}') -eq 1 ]]; then
         echo "Building ${added_modified_file}"
         go build -o ${added_modified_file} ${added_modified_file};

         echo "Zipping ${added_modified_file}"
         zip ${added_modified_file}.zip ${added_modified_file}

         echo "Name of the go function"
         funcname=$(basename -s .go ${added_modified_file})

         echo "Checking if $funcname already exists"
         found=$(aws lambda list-functions --no-verify-ssl --region ${{env.region_to_deploy_lambdas}} --query 'Functions[?starts_with(FunctionName, `$funcname`) == `true`].FunctionName'|grep $funcname)

         echo "Deploying into AWS"
         if [[ -z $found ]]; then

         aws lambda create-function --function-name "$funcname" --runtime go1.x \
         --handler $funcname.handler --region ${{env.region_to_deploy_lambdas}} \
         --role arn:aws:iam::740915728773:role/service-role/hello-role-xshw5xbe \
         --zip-file fileb://${added_modified_file}.zip

         echo "Creation of $funcname Success"
         
         else

         aws lambda update-function-code --function-name "$funcname"  \
         --region ${{env.region_to_deploy_lambdas}} \
         --zip-file fileb://${added_modified_file}.zip

         echo "Update of $funcname Success"
         fi
         fi
       done
